{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "CMake 프로젝트 구조 및 개발 환경 설정",
        "description": "프로젝트의 기본적인 빌드 시스템과 개발 환경을 구축하고, 크로스플랫폼 지원을 위한 CMake 설정 구성",
        "details": "CMakeLists.txt 작성하여 C++ 17 이상 버전 지원, 플랫폼별 컴파일러 설정, 외부 라이브러리 연동 준비, src/, include/, tests/, examples/ 디렉토리 구조 생성. Windows (MSVC), macOS (Clang), Linux (GCC) 빌드 지원. 의존성 관리를 위한 vcpkg 또는 conan 설정 고려.",
        "testStrategy": "각 플랫폼에서 빌드 성공 확인, 기본 헬로월드 프로그램 컴파일 및 실행 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "기본 디렉토리 구조 생성 및 C++ 프로젝트 설정",
            "description": "표준적인 C++ 프로젝트를 위한 디렉토리 구조를 생성하고 코드 구성의 기반을 마련",
            "dependencies": [],
            "details": "src/, include/, tests/, examples/, external/, build/, docs/ 디렉토리 생성. 각 디렉토리에 필요한 .gitkeep 파일 또는 기본 README.md 파일 생성. 프로젝트 루트에 .gitignore 파일 생성하여 빌드 아티팩트, 임시 파일 등 제외 설정. LICENSE 파일 및 기본 README.md 작성.",
            "status": "done",
            "testStrategy": "디렉토리 구조가 올바르게 생성되었는지 확인, git 저장소에 올바르게 추가되는지 검증"
          },
          {
            "id": 2,
            "title": "CMakeLists.txt 작성 및 C++17 빌드 시스템 구성",
            "description": "크로스플랫폼 빌드를 지원하는 CMake 설정 파일 작성 및 C++17 표준 지원",
            "dependencies": [
              "1.1"
            ],
            "details": "루트 CMakeLists.txt에서 cmake_minimum_required 3.16 이상 설정, PROJECT() 명령으로 프로젝트 정의, C++17 표준 설정 (set(CMAKE_CXX_STANDARD 17), set(CMAKE_CXX_STANDARD_REQUIRED ON)). 컴파일러별 최적화 플래그 및 경고 설정 (-Wall, -Wextra for GCC/Clang, /W3 for MSVC). 플랫폼별 조건부 컴파일 설정 추가.",
            "status": "done",
            "testStrategy": "Windows, macOS, Linux에서 cmake 명령 실행 성공 확인, C++17 기능이 정상 컴파일되는지 테스트"
          },
          {
            "id": 3,
            "title": "외부 라이브러리 의존성 관리 시스템 구축",
            "description": "vcpkg 또는 conan을 활용한 외부 라이브러리 의존성 관리 시스템 구성",
            "dependencies": [
              "1.2"
            ],
            "details": "vcpkg.json 또는 conanfile.txt 작성하여 필요한 라이브러리 목록 정의. CMake에서 find_package() 명령을 통한 라이브러리 검색 및 링크 설정. 향후 필요할 ONNX Runtime, 오디오 처리 라이브러리(libsndfile) 등의 의존성 설정 준비. 플랫폼별 라이브러리 경로 설정 및 정적/동적 링크 옵션 구성.",
            "status": "done",
            "testStrategy": "의존성 관리 도구가 정상 작동하는지 확인, 기본 라이브러리 하나 이상 성공적으로 링크되는지 테스트"
          },
          {
            "id": 4,
            "title": "플랫폼별 컴파일러 설정 및 빌드 스크립트 작성",
            "description": "Windows(MSVC), macOS(Clang), Linux(GCC) 각 플랫폼에 최적화된 빌드 스크립트 및 설정 구성",
            "dependencies": [
              "1.2",
              "1.3"
            ],
            "details": "각 플랫폼별 build.sh/build.bat 스크립트 작성. CMakePresets.json을 활용한 플랫폼별 빌드 구성 사전 정의. 컴파일러별 최적화 옵션 (-O2, -O3) 및 디버그 정보 설정. 정적 분석 도구 (clang-tidy, cppcheck) 통합 설정. Release/Debug 빌드 타입별 설정 차별화.",
            "status": "done",
            "testStrategy": "각 플랫폼에서 빌드 스크립트 실행 성공 확인, Release/Debug 모드 모두 정상 빌드되는지 검증"
          },
          {
            "id": 5,
            "title": "기본 Hello World 프로그램 작성 및 빌드 검증",
            "description": "기본적인 C++ Hello World 프로그램을 작성하여 전체 빌드 시스템이 올바르게 동작하는지 검증",
            "dependencies": [
              "1.2",
              "1.4"
            ],
            "details": "src/main.cpp에 간단한 Hello World 프로그램 작성. CMakeLists.txt에 실행 파일 타겟 추가 (add_executable). include/ 디렉토리의 헤더 파일 포함 설정. 컴파일, 링크, 실행이 모든 플랫폼에서 성공하는지 확인하는 기본 테스트 케이스 작성. 향후 라이브러리 구조를 고려한 기본 헤더 파일 구조 설계.",
            "status": "done",
            "testStrategy": "모든 지원 플랫폼에서 Hello World 프로그램 컴파일 및 실행 성공 확인, 출력 결과 정확성 검증"
          }
        ]
      },
      {
        "id": 2,
        "title": "코어 인터페이스 및 데이터 구조 설계",
        "description": "ISynthesisNode, DataPacket, ComputationGraph 등 핵심 추상화 인터페이스와 데이터 구조를 설계하고 구현",
        "details": "ISynthesisNode 추상 클래스 (process(), initialize(), getInputs(), getOutputs() 메서드), DataPacket 클래스 (오디오 데이터, 메타데이터, 타임스탬프 포함), ComputationGraph 클래스 (노드 연결, 실행 순서 관리, 병렬 처리 지원), IPlatformIO 인터페이스 (파일 I/O, 메모리 관리 추상화). 스마트 포인터 활용한 메모리 안전성 확보.",
        "testStrategy": "인터페이스 단위 테스트, 모의 노드를 통한 그래프 연결 테스트, 메모리 누수 검사",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "ISynthesisNode 추상 클래스 및 기본 노드 인터페이스 설계",
            "description": "모든 음성 합성 노드의 기반이 되는 ISynthesisNode 추상 클래스와 핵심 메서드들을 설계 및 구현",
            "dependencies": [],
            "details": "include/core/ISynthesisNode.h 파일에 ISynthesisNode 추상 클래스 정의. process(const DataPacket& input) -> DataPacket, initialize() -> bool, getInputs() -> vector<string>, getOutputs() -> vector<string> 순수 가상 메서드 선언. 노드 ID, 이름, 상태 관리를 위한 멤버 변수 및 getter/setter 메서드 포함. 스마트 포인터(shared_ptr, unique_ptr) 사용을 위한 메모리 관리 정책 정의.",
            "status": "done",
            "testStrategy": "추상 클래스의 인터페이스 계약 검증을 위한 모킹 노드 구현 및 단위 테스트"
          },
          {
            "id": 2,
            "title": "DataPacket 클래스 및 오디오 데이터 구조 구현",
            "description": "오디오 데이터, 메타데이터, 타임스탬프를 포함한 범용 데이터 패킷 클래스 구현",
            "dependencies": [],
            "details": "include/core/DataPacket.h에 DataPacket 클래스 정의. 오디오 데이터는 vector<float> 또는 vector<double>로 저장, 샘플레이트, 채널 수, 비트뎁스 메타데이터 포함. 타임스탬프는 std::chrono를 사용한 고정밀 시간 정보. 데이터 직렬화/역직렬화 메서드, 깊은 복사/이동 생성자, RAII 원칙 준수한 메모리 관리. 템플릿 기반으로 다양한 데이터 타입 지원.",
            "status": "done",
            "testStrategy": "다양한 오디오 포맷 데이터 저장/복원 테스트, 메모리 사용량 및 복사 성능 벤치마크"
          },
          {
            "id": 3,
            "title": "ComputationGraph 클래스 기본 구조 및 노드 관리 시스템",
            "description": "노드 연결, 의존성 관리, 기본적인 실행 순서 결정 기능을 포함한 ComputationGraph 클래스 구현",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "include/core/ComputationGraph.h에 ComputationGraph 클래스 정의. addNode(), removeNode(), connectNodes() 메서드로 그래프 구성. 내부적으로 adjacency list 또는 adjacency matrix로 노드 연결 관계 저장. 위상 정렬 알고리즘 구현으로 실행 순서 결정. 순환 참조 검출 및 오류 처리. 노드 간 데이터 흐름 검증 메커니즘.",
            "status": "done",
            "testStrategy": "다양한 그래프 구조에서 위상 정렬 정확성 검증, 순환 참조 감지 테스트, 노드 추가/제거 시 일관성 유지 확인"
          },
          {
            "id": 4,
            "title": "ComputationGraph 병렬 처리 및 실행 엔진 구현",
            "description": "멀티스레드 기반 병렬 노드 실행, 스케줄링, 동기화 메커니즘 구현",
            "dependencies": [
              "2.3"
            ],
            "details": "std::thread, std::async를 사용한 병렬 실행 엔진 구현. execute() 메서드에서 의존성 그래프 기반 스케줄링, 독립적 노드들의 병렬 실행. std::mutex, std::condition_variable로 노드 간 동기화. 스레드풀 패턴 적용으로 스레드 생성/소멸 오버헤드 최소화. 실행 진행률 모니터링 및 중단 메커니즘 제공.",
            "status": "done",
            "testStrategy": "병렬 실행 정확성 검증, 스레드 안전성 테스트, 다양한 그래프 크기에서 성능 벤치마크"
          },
          {
            "id": 5,
            "title": "IPlatformIO 인터페이스 및 플랫폼 추상화 레이어 구현",
            "description": "파일 I/O, 메모리 관리를 추상화한 플랫폼 독립적 인터페이스 설계 및 기본 구현체 제공",
            "dependencies": [],
            "details": "include/core/IPlatformIO.h에 IPlatformIO 인터페이스 정의. readFile(), writeFile(), allocateMemory(), deallocateMemory() 등 플랫폼별 차이를 추상화한 메서드 선언. src/platform/에 Windows, macOS, Linux별 구현체 클래스 작성. 파일 경로 처리, 메모리 할당 정책, 예외 처리 표준화. Factory 패턴으로 플랫폼 자동 감지 및 적절한 구현체 반환.",
            "status": "done",
            "testStrategy": "각 플랫폼에서 파일 I/O 동작 일관성 검증, 메모리 할당/해제 안전성 테스트, 플랫폼별 특수 케이스 처리 확인"
          }
        ]
      },
      {
        "id": 3,
        "title": "WORLD 알고리즘 분석 및 합성 노드 구현",
        "description": "WORLD 보코더 알고리즘을 분석하고 WorldAnalysisNode와 WorldSynthesisNode를 구현하여 F0 추출, 스펙트럼 분석, 파형 합성 기능 제공",
        "details": "WORLD 논문 및 공개 알고리즘 분석하여 F0 추출 (DIO, Harvest), 스펙트럼 분석 (CheapTrick), 비주기성 지표 (D4C) 알고리즘 구현. WorldAnalysisNode는 WAV 입력을 받아 F0, 스펙트로그램, 비주기성을 DataPacket으로 출력. WorldSynthesisNode는 이를 받아 최종 WAV 생성. 실시간 처리와 배치 처리 모두 지원.",
        "testStrategy": "알려진 샘플 오디오로 분석-합성 결과 비교, 원본과 재합성 음성의 품질 측정 (PESQ, STOI), 처리 시간 벤치마크",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "WORLD 알고리즘 논문 분석 및 핵심 구성 요소 설계",
            "description": "WORLD 보코더의 DIO, Harvest, CheapTrick, D4C 알고리즘을 분석하여 WorldAnalysisNode와 WorldSynthesisNode의 기본 구조를 설계",
            "dependencies": [],
            "details": "WORLD 논문 및 기술 문서를 분석하여 F0 추출 알고리즘 (DIO, Harvest), 스펙트럼 분석 알고리즘 (CheapTrick), 비주기성 지표 알고리즘 (D4C)의 수학적 원리와 구현 방법을 이해. include/world/WorldAnalysisNode.h와 WorldSynthesisNode.h 헤더 파일에 클래스 인터페이스 정의. ISynthesisNode를 상속받아 process(), initialize() 메서드 선언. 각 알고리즘에 필요한 파라미터 구조체 및 데이터 플로우 설계",
            "status": "done",
            "testStrategy": "WORLD 알고리즘의 이론적 이해도 검증을 위한 문서 작성, 인터페이스 설계의 일관성 검토"
          },
          {
            "id": 2,
            "title": "F0 추출 알고리즘 (DIO, Harvest) 구현",
            "description": "WORLD의 핵심 구성 요소인 DIO와 Harvest 알고리즘을 구현하여 기본 주파수(F0) 추출 기능을 제공",
            "dependencies": [
              "3.1"
            ],
            "details": "src/world/F0Extraction.cpp에 DIO 및 Harvest 알고리즘 구현. DIO는 사인파 기반 F0 추정 방법으로 저품질/고속 처리 모드, Harvest는 고품질 F0 추출 방법으로 정밀 분석 모드 구현. 피치 트랙킹, 보이스/언보이스 판정, 시간 축 기반 F0 곡선 생성. 오디오 입력 신호에서 프레임 단위로 F0 값을 추출하여 vector<double> 형태로 반환하는 함수 구현",
            "status": "done",
            "testStrategy": "알려진 피치를 가진 테스트 신호로 F0 추출 정확도 측정, 다양한 음성 샘플에서 피치 트랙킹 성능 검증"
          },
          {
            "id": 3,
            "title": "스펙트럼 분석 알고리즘 (CheapTrick) 및 비주기성 지표 (D4C) 구현",
            "description": "WORLD의 스펙트럼 포락선 추출과 비주기성 지표 계산을 위한 CheapTrick과 D4C 알고리즘을 구현",
            "dependencies": [
              "3.2"
            ],
            "details": "src/world/SpectralAnalysis.cpp에 CheapTrick 알고리즘 구현하여 F0 정보를 기반으로 스펙트럼 포락선(spectral envelope) 추출. FFT 기반 주파수 도메인 분석, 케프스트럼 평활화 기법 적용. src/world/D4C.cpp에 D4C 알고리즘 구현하여 비주기성 지표(aperiodicity) 계산. 조화성분과 잡음성분을 분리하여 음성의 브리더니스(breathiness) 특성 모델링",
            "status": "done",
            "testStrategy": "합성된 사인파 신호로 스펙트럼 추출 정확도 검증, 다양한 음성 샘플의 비주기성 지표 일관성 확인"
          },
          {
            "id": 4,
            "title": "WorldAnalysisNode 구현 및 분석 파이프라인 통합",
            "description": "WAV 입력을 받아 F0, 스펙트로그램, 비주기성을 DataPacket으로 출력하는 WorldAnalysisNode 완전 구현",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "details": "src/world/WorldAnalysisNode.cpp에 ISynthesisNode를 상속받는 완전한 분석 노드 구현. process() 메서드에서 입력 WAV 데이터를 받아 F0 추출, 스펙트럼 분석, 비주기성 계산을 순차 수행. 결과를 DataPacket에 구조화하여 후속 노드로 전달. 실시간 처리를 위한 프레임 기반 처리와 배치 처리 모드 지원. 샘플레이트, 프레임 길이 등 파라미터 설정 인터페이스 제공",
            "status": "done",
            "testStrategy": "다양한 길이와 품질의 WAV 파일로 분석 결과 검증, DataPacket 직렬화/역직렬화 정확성 확인"
          },
          {
            "id": 5,
            "title": "WorldSynthesisNode 구현 및 파형 재합성 기능 완성",
            "description": "F0, 스펙트로그램, 비주기성 정보를 받아 최종 WAV 파형을 생성하는 WorldSynthesisNode 구현 및 전체 분석-합성 파이프라인 완성",
            "dependencies": [
              "3.4"
            ],
            "details": "src/world/WorldSynthesisNode.cpp에 WORLD 합성 알고리즘 구현. DataPacket에서 F0, 스펙트럼 포락선, 비주기성 지표를 추출하여 시간 도메인 파형으로 재합성. Minimum-phase 필터링, 소스-필터 모델 기반 합성, 윈도우 함수 적용한 오버랩-애드 처리. 실시간 스트리밍과 배치 처리 모드 모두 지원. 품질-속도 트레이드오프를 위한 설정 옵션 제공",
            "status": "done",
            "testStrategy": "원본 음성과 분석-합성 결과의 품질 비교 (PESQ, STOI 측정), 처리 시간 벤치마크, 메모리 사용량 모니터링"
          }
        ]
      },
      {
        "id": 4,
        "title": "WAV 파일 I/O 및 오디오 처리 유틸리티 구현",
        "description": "크로스플랫폼 WAV 파일 읽기/쓰기 기능과 기본적인 오디오 신호 처리 유틸리티 함수들을 구현",
        "details": "WAV 파일 헤더 파싱 및 생성, 다양한 샘플레이트/비트깊이 지원 (16-bit, 24-bit, 32-bit float), 스테레오/모노 변환, 리샘플링 기능, 윈도우 함수 (Hanning, Hamming, Blackman), FFT/IFFT 래퍼, 오디오 버퍼 관리 클래스. 플랫폼별 엔디안 처리.",
        "testStrategy": "다양한 형식의 WAV 파일 읽기/쓰기 테스트, 오디오 신호 변환 정확성 검증, 메모리 사용량 모니터링",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "WAV 파일 헤더 파싱 및 생성 유틸리티 구현",
            "description": "WAV 파일의 RIFF 헤더 구조를 파싱하고 생성하는 기본 유틸리티 함수들을 구현합니다. 다양한 비트 깊이와 샘플레이트를 지원하는 헤더 구조체를 정의합니다.",
            "dependencies": [],
            "details": "WavHeader 구조체 정의 (RIFF, WAVE, fmt, data 청크), 엔디안 변환 함수, 헤더 유효성 검증, 16-bit/24-bit/32-bit float PCM 포맷 지원. include/audio/wav_io.h와 src/audio/wav_io.cpp 파일 생성. 플랫폼별 바이트 순서 처리를 위한 매크로 정의.",
            "status": "pending",
            "testStrategy": "다양한 포맷의 WAV 파일 헤더 파싱 테스트, 잘못된 헤더에 대한 에러 처리 검증"
          },
          {
            "id": 2,
            "title": "WAV 파일 읽기 기능 구현",
            "description": "WAV 파일에서 오디오 데이터를 읽어오는 기능을 구현합니다. 다양한 포맷의 WAV 파일을 지원하고 오디오 버퍼로 로드하는 기능을 제공합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "WavReader 클래스 구현, 파일 스트림 처리, 청크별 데이터 읽기, 샘플 포맷 변환 (int16 → float, int24 → float, float32), 스테레오/모노 채널 처리. 대용량 파일을 위한 스트리밍 읽기 지원. 메모리 효율적인 버퍼 관리.",
            "status": "pending",
            "testStrategy": "표준 WAV 파일들로 읽기 정확성 테스트, 메모리 사용량 모니터링, 대용량 파일 스트리밍 테스트"
          },
          {
            "id": 3,
            "title": "WAV 파일 쓰기 기능 구현",
            "description": "오디오 버퍼 데이터를 WAV 파일 포맷으로 저장하는 기능을 구현합니다. 다양한 비트 깊이와 샘플레이트로 출력할 수 있도록 합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "WavWriter 클래스 구현, 헤더 생성 및 쓰기, 오디오 데이터 포맷 변환 (float → int16/int24/float32), 파일 크기 계산 및 헤더 업데이트. 실시간 쓰기를 위한 버퍼링 지원. 파일 무결성 보장을 위한 예외 처리.",
            "status": "pending",
            "testStrategy": "생성된 WAV 파일의 다른 소프트웨어 호환성 테스트, 포맷별 출력 품질 검증"
          },
          {
            "id": 4,
            "title": "오디오 버퍼 관리 및 기본 신호 처리 유틸리티 구현",
            "description": "오디오 데이터를 효율적으로 관리하는 AudioBuffer 클래스와 스테레오/모노 변환, 리샘플링 등 기본 신호 처리 기능을 구현합니다.",
            "dependencies": [
              "4.2",
              "4.3"
            ],
            "details": "AudioBuffer 클래스 (멀티채널 지원, 샘플 인덱싱, 메모리 관리), 스테레오↔모노 변환, 선형/큐빅 보간 리샘플링, 게인 조절, 믹싱 기능. 템플릿 기반으로 float/double 정밀도 지원. SIMD 최적화 고려사항 포함.",
            "status": "pending",
            "testStrategy": "신호 변환 정확성 검증, 리샘플링 품질 테스트, 메모리 누수 검사"
          },
          {
            "id": 5,
            "title": "윈도우 함수 및 FFT 래퍼 구현",
            "description": "주파수 도메인 분석을 위한 윈도우 함수들(Hanning, Hamming, Blackman)과 FFT/IFFT 기능을 구현합니다.",
            "dependencies": [
              "4.4"
            ],
            "details": "WindowFunction 클래스로 다양한 윈도우 타입 지원, FFTW3 또는 KissFFT 라이브러리 통합, FFTWrapper 클래스로 forward/inverse 변환, 복소수 데이터 처리, 제로 패딩 및 윈도우 적용 자동화. 실시간 처리를 위한 STFT 기능 포함.",
            "status": "pending",
            "testStrategy": "윈도우 함수 수학적 정확성 검증, FFT 변환 결과 검증, 성능 벤치마크"
          }
        ]
      },
      {
        "id": 5,
        "title": "PSOLA 기반 유닛 선택 합성 시스템 구현",
        "description": "PSOLA(Pitch Synchronous Overlap and Add) 알고리즘을 구현하고, 음성 단위 데이터베이스 관리 및 유닛 선택 기능을 포함한 UnitSelectionNode와 PsolaSynthesisNode 개발",
        "details": "PSOLA 알고리즘 논문 분석 및 구현: 피치 마킹, 파형 분할, OLA(Overlap-Add) 처리. UnitSelectionNode는 diphone/triphone 단위로 구성된 음성 DB에서 목표 음소, 피치, 길이에 최적인 유닛 선택 (비용 함수 기반). PsolaSynthesisNode는 선택된 유닛들을 목표 파라미터에 맞춰 시간축/주파수축 변형 후 자연스럽게 연결. 음성 DB 인덱싱 및 빠른 검색 구조.",
        "testStrategy": "합성된 음성의 자연스러움 평가, 다양한 언어/발음에 대한 유닛 선택 정확성 검증, 실시간 처리 성능 측정",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "PSOLA 피치 마킹 및 분석 모듈 구현",
            "description": "PSOLA 알고리즘의 핵심인 피치 동기화 포인트 검출 및 파형 분할을 위한 피치 마킹 시스템 구현",
            "dependencies": [],
            "details": "자기상관 함수 또는 AMDF(Average Magnitude Difference Function) 기반 피치 추정 알고리즘 구현. 피치 마크 위치에서 파형을 분할하는 윈도우 함수 적용. 피치 주기 검증 및 보정 로직 포함. PitchMarker 클래스와 관련 유틸리티 함수들을 src/psola/ 디렉토리에 구현.",
            "status": "pending",
            "testStrategy": "알려진 피치의 합성 사인파 신호로 피치 검출 정확도 테스트, 실제 음성 파일의 수동 라벨링과 비교 검증"
          },
          {
            "id": 2,
            "title": "음성 단위 데이터베이스 구조 및 인덱싱 시스템 개발",
            "description": "diphone/triphone 단위로 구성된 음성 데이터베이스의 저장, 검색, 인덱싱을 위한 효율적인 자료구조 구현",
            "dependencies": [],
            "details": "UnitDatabase 클래스 구현: 음소 정보, 피치, 길이, 음향 특성을 포함한 메타데이터와 실제 오디오 세그먼트 저장. B-tree 또는 해시맵 기반 빠른 검색 구조. 음성 단위의 음향적 특성(F0 평균, 스펙트럼 중심, 지속시간) 추출 및 저장. JSON 또는 바이너리 형식의 데이터베이스 파일 포맷 설계.",
            "status": "pending",
            "testStrategy": "다양한 크기의 데이터베이스로 검색 속도 벤치마크, 메모리 사용량 최적화 검증, 데이터 무결성 테스트"
          },
          {
            "id": 3,
            "title": "유닛 선택 비용 함수 및 UnitSelectionNode 구현",
            "description": "목표 음향 파라미터와 데이터베이스 유닛 간의 최적 매칭을 위한 비용 함수 기반 유닛 선택 알고리즘 구현",
            "dependencies": [
              "5.2"
            ],
            "details": "Target cost(목표 피치, 길이와의 차이)와 Join cost(인접 유닛 간 연결 비용) 계산. 다차원 거리 함수 구현: 피치 차이, 스펙트럼 거리, 길이 비율 등을 가중합으로 계산. Viterbi 디코딩 또는 A* 탐색으로 최적 유닛 시퀀스 선택. UnitSelectionNode 클래스에서 음소열과 목표 운율 정보를 받아 최적 유닛 목록 출력.",
            "status": "pending",
            "testStrategy": "동일 문장의 다른 운율 조건에서 유닛 선택 일관성 검증, 비용 함수 파라미터 튜닝을 통한 음질 개선 측정"
          },
          {
            "id": 4,
            "title": "PSOLA 시간축/주파수축 변형 엔진 구현",
            "description": "선택된 음성 유닛들을 목표 피치와 지속시간에 맞춰 변형하는 PSOLA 기반 신호 처리 엔진 개발",
            "dependencies": [
              "5.1"
            ],
            "details": "TD-PSOLA(Time-Domain PSOLA) 구현: 피치 마크 기반 파형 세그먼트 추출, 목표 피치에 따른 세그먼트 간격 조정, 목표 지속시간에 따른 세그먼트 반복/제거. Overlap-Add 윈도우 함수 적용으로 자연스러운 연결. PsolaEngine 클래스에서 피치 스케일링, 시간 스케일링, 크로스페이딩 처리.",
            "status": "pending",
            "testStrategy": "다양한 피치/시간 변형률에서 합성 품질 평가, 아티팩트(glitch) 검출, 원본 대비 스펙트럼 왜곡 측정"
          },
          {
            "id": 5,
            "title": "PsolaSynthesisNode 통합 및 실시간 처리 최적화",
            "description": "유닛 선택과 PSOLA 변형을 통합한 완전한 합성 노드 구현 및 실시간 처리를 위한 성능 최적화",
            "dependencies": [
              "5.3",
              "5.4"
            ],
            "details": "PsolaSynthesisNode 클래스에서 UnitSelectionNode 결과를 받아 PSOLA 변형 후 최종 오디오 출력. 스트리밍 처리를 위한 버퍼링 및 청크 단위 처리. 멀티스레딩을 통한 유닛 선택과 파형 합성의 파이프라인 병렬화. 메모리 풀링과 캐싱으로 실시간 처리 성능 확보. 품질/속도 트레이드오프 조절 파라미터 제공.",
            "status": "pending",
            "testStrategy": "실시간 합성 지연시간 측정, CPU/메모리 사용률 프로파일링, 다양한 텍스트 길이에서 처리 속도 일관성 검증, 주관적 음질 평가"
          }
        ]
      },
      {
        "id": 6,
        "title": "LLSM2 통계 기반 파라미터 생성 모델 구현",
        "description": "LLSM(Low-Level Speech Model) 2 알고리즘을 분석하고 LlsmModelNode로 구현하여 통계 기반 스펙트럼 파라미터 생성 기능 제공",
        "details": "LLSM2 논문 기반 알고리즘 분석: 조화성분과 잡음성분 분리, 스펙트럼 파라미터 모델링, HNM(Harmonic plus Noise Model) 구현. LlsmModelNode는 UTAU 스타일 파라미터(음높이, 발음, 길이 등)를 입력받아 통계적 모델을 통해 스펙트럼 파라미터 생성. 기존 UTAU 보이스 뱅크와의 호환성 고려한 파라미터 매핑.",
        "testStrategy": "기존 UTAU 결과와 품질 비교, 다양한 파라미터 조합에 대한 출력 일관성 검증, 처리 속도 벤치마크",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "LLSM2 알고리즘 논문 분석 및 수학적 모델링",
            "description": "LLSM2 논문을 상세히 분석하여 조화성분과 잡음성분 분리 알고리즘, HNM 모델의 수학적 기반을 이해하고 구현 계획 수립",
            "dependencies": [],
            "details": "LLSM2 논문의 핵심 알고리즘 분석: 조화성분 추출을 위한 피치 추정 방법, 잡음성분 모델링을 위한 스펙트럼 분석, HNM 모델의 매개변수 추정 방법. 수학적 공식들을 C++ 구현 가능한 형태로 변환하고, 필요한 외부 라이브러리 (FFTW, Eigen 등) 조사. 알고리즘의 계산 복잡도 분석 및 실시간 처리 가능성 검토.",
            "status": "pending",
            "testStrategy": "논문의 예제 데이터를 통한 알고리즘 정확성 검증, 기준 구현체와의 결과 비교"
          },
          {
            "id": 2,
            "title": "조화성분 분석 및 추출 모듈 구현",
            "description": "음성 신호에서 피치 추정을 통해 조화성분을 분리하고 분석하는 핵심 모듈 구현",
            "dependencies": [
              "6.1"
            ],
            "details": "HarmonicAnalyzer 클래스 구현: 자기상관함수 기반 피치 추정, 조화성분 추출을 위한 코움 필터링, 조화성분의 진폭과 위상 추정. STFT 기반 스펙트럼 분석과 조화성분 템플릿 매칭. 음성의 유성음/무성음 분류 및 조화성 정도 측정. 시간에 따른 피치 변화 추적 및 smoothing 알고리즘 적용.",
            "status": "pending",
            "testStrategy": "다양한 화자의 음성에 대한 피치 추정 정확도 측정, 조화성분 분리 품질 평가"
          },
          {
            "id": 3,
            "title": "잡음성분 모델링 및 스펙트럼 파라미터 생성",
            "description": "조화성분을 제거한 잔여 신호에서 잡음성분을 모델링하고 스펙트럼 파라미터를 생성하는 모듈 구현",
            "dependencies": [
              "6.2"
            ],
            "details": "NoiseAnalyzer 클래스 구현: 조화성분 제거 후 잔여 신호 분석, 잡음성분의 스펙트럼 포락선 추정, LPC 분석을 통한 포르만트 추출. 스펙트럼 파라미터 벡터 생성 (멜 스케일 기반), 시간적 변화에 따른 파라미터 보간. 잡음성분의 에너지 분포 분석 및 주파수 대역별 모델링.",
            "status": "pending",
            "testStrategy": "잡음성분 모델링 정확도 검증, 재합성된 음성의 품질 평가"
          },
          {
            "id": 4,
            "title": "UTAU 파라미터 매핑 및 호환성 레이어 구현",
            "description": "UTAU 스타일 파라미터를 LLSM2 내부 파라미터로 변환하는 매핑 시스템과 호환성 레이어 구현",
            "dependencies": [
              "6.2",
              "6.3"
            ],
            "details": "UtauParameterMapper 클래스 구현: UTAU 음높이 파라미터를 LLSM2 피치 파라미터로 변환, 발음 길이를 시간축 스케일링 파라미터로 매핑, 음량을 진폭 파라미터로 변환. 기존 UTAU 보이스뱅크 메타데이터 파싱 및 LLSM2 파라미터 공간으로의 정규화. 파라미터 보간 및 smooth transition 처리.",
            "status": "pending",
            "testStrategy": "기존 UTAU 보이스뱅크와의 파라미터 변환 정확성 검증, 호환성 테스트"
          },
          {
            "id": 5,
            "title": "LlsmModelNode 통합 구현 및 최적화",
            "description": "앞서 구현한 모든 모듈을 통합하여 LlsmModelNode를 완성하고 성능 최적화 수행",
            "dependencies": [
              "6.1",
              "6.2",
              "6.3",
              "6.4"
            ],
            "details": "LlsmModelNode 클래스 완성: ISynthesisNode 인터페이스 구현, 조화성분/잡음성분 분석기 통합, 실시간 스펙트럼 파라미터 생성 파이프라인 구축. 메모리 풀 기반 버퍼 관리, 멀티스레딩을 통한 병렬 처리 최적화. 캐싱 메커니즘을 통한 반복 계산 최소화, SIMD 명령어를 활용한 벡터 연산 최적화.",
            "status": "pending",
            "testStrategy": "전체 시스템 통합 테스트, 실시간 처리 성능 벤치마크, 메모리 사용량 및 CPU 부하 측정"
          }
        ]
      },
      {
        "id": 7,
        "title": "UTAU 호환 어댑터 및 플러그인 인터페이스 구현",
        "description": "UTAU 프런트엔드와의 호환성을 위한 UtauAdapter 구현 및 resampler.exe/wavtool.exe 규격에 맞는 실행 파일 생성",
        "details": "world4utau 동작 분석하여 UTAU 임시 파일 형식 (.wav, .frq, .llsm) 파싱, 커맨드라인 파라미터 처리, 배치 파일 기반 호출 방식 지원. UtauAdapter 클래스로 UTAU 파라미터를 내부 DataPacket으로 변환, 다양한 합성 백엔드 (WORLD, PSOLA, LLSM2) 선택 가능한 설정 파일 지원. Windows 실행 파일 (.exe) 생성 및 UTAU 플러그인 디렉토리 설치 스크립트.",
        "testStrategy": "실제 UTAU 프로젝트에서 플러그인 동작 테스트, 기존 resampler와 출력 비교, 다양한 UTAU 버전 호환성 검증",
        "priority": "high",
        "dependencies": [
          5,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "UTAU 파라미터 파싱 및 임시 파일 처리 구현",
            "description": "UTAU가 생성하는 임시 파일(.wav, .frq, .llsm)과 커맨드라인 파라미터를 분석하고 파싱하는 시스템 구현",
            "dependencies": [],
            "details": "world4utau 동작 방식을 참조하여 UTAU 호환 파라미터 분석기를 구현합니다. 커맨드라인 파라미터 처리 (음소, 길이, 피치, 플래그 등), 임시 디렉토리에서 .wav/.frq/.llsm 파일 읽기, 배치 파일 기반 호출 방식 지원을 포함합니다. UtauParameter 구조체와 파일 파서 클래스를 작성하여 내부 DataPacket 형태로 변환할 준비를 합니다.",
            "status": "pending",
            "testStrategy": "다양한 UTAU 파라미터 조합에 대한 파싱 테스트, 임시 파일 형식 검증, 실제 UTAU 환경에서 생성된 파일들로 호환성 확인"
          },
          {
            "id": 2,
            "title": "UtauAdapter 클래스 구현",
            "description": "UTAU 파라미터를 내부 DataPacket으로 변환하고 다양한 합성 백엔드를 선택할 수 있는 어댑터 클래스 구현",
            "dependencies": [
              "7.1"
            ],
            "details": "UtauAdapter 클래스를 구현하여 파싱된 UTAU 파라미터를 ISynthesisNode 체계의 DataPacket으로 변환합니다. WORLD, PSOLA, LLSM2 등 다양한 합성 백엔드를 선택할 수 있는 설정 시스템을 구축하고, 백엔드별 파라미터 매핑 로직을 구현합니다. 설정 파일 기반 백엔드 전환 기능과 ComputationGraph 생성 로직을 포함합니다.",
            "status": "pending",
            "testStrategy": "각 백엔드별 변환 정확성 테스트, 설정 파일 기반 백엔드 전환 테스트, 생성된 ComputationGraph 유효성 검증"
          },
          {
            "id": 3,
            "title": "UTAU 호환 실행 파일 생성 시스템 구현",
            "description": "resampler.exe/wavtool.exe 규격에 맞는 Windows 실행 파일을 생성하는 빌드 시스템 구현",
            "dependencies": [
              "7.2"
            ],
            "details": "CMake 설정을 확장하여 UTAU 플러그인 규격에 맞는 resampler.exe와 wavtool.exe를 빌드할 수 있도록 합니다. Windows 전용 빌드 타겟 생성, 적절한 링크 옵션 설정, 콘솔 애플리케이션 형태의 main() 함수 구현을 포함합니다. 생성된 실행 파일이 UTAU에서 올바르게 인식되고 동작하도록 파일 속성과 메타데이터를 설정합니다.",
            "status": "pending",
            "testStrategy": "생성된 실행 파일의 UTAU 인식 테스트, 파일 크기와 의존성 최적화 확인, Windows 버전별 호환성 검증"
          },
          {
            "id": 4,
            "title": "UTAU 플러그인 디렉토리 자동 설치 스크립트 구현",
            "description": "빌드된 플러그인을 UTAU 플러그인 디렉토리에 자동으로 설치하는 스크립트 시스템 구현",
            "dependencies": [
              "7.3"
            ],
            "details": "Windows 환경에서 UTAU 설치 경로를 자동 감지하고 플러그인을 올바른 디렉토리에 배포하는 설치 스크립트를 작성합니다. 레지스트리 검색을 통한 UTAU 경로 자동 감지, 플러그인 백업 및 복원 기능, 설치/제거 배치 파일 생성을 포함합니다. 사용자 권한 문제를 고려한 안전한 파일 복사 로직을 구현합니다.",
            "status": "pending",
            "testStrategy": "다양한 UTAU 버전과 설치 경로에서의 자동 감지 테스트, 설치/제거 기능 검증, 사용자 권한별 동작 확인"
          },
          {
            "id": 5,
            "title": "통합 테스트 및 UTAU 호환성 검증",
            "description": "실제 UTAU 환경에서 구현된 어댑터와 플러그인의 전체적인 동작을 검증하는 종합 테스트 수행",
            "dependencies": [
              "7.1",
              "7.2",
              "7.3",
              "7.4"
            ],
            "details": "실제 UTAU 프로젝트 파일을 사용하여 전체 파이프라인 테스트를 수행합니다. 기존 resampler와 출력 품질 비교, 다양한 UTAU 버전 (UTAU-SYNTH, OpenUTAU 등)에서의 호환성 검증, 성능 벤치마크를 실시합니다. 에러 처리 및 로깅 시스템 검증, 메모리 사용량 최적화 확인을 포함하여 안정성과 품질을 보장합니다.",
            "status": "pending",
            "testStrategy": "실제 UTAU 프로젝트에서의 end-to-end 테스트, 기존 플러그인과의 품질 비교 분석, 다양한 합성 설정에서의 안정성 검증"
          }
        ]
      },
      {
        "id": 8,
        "title": "ONNX Runtime 통합 및 딥러닝 추론 노드 구현",
        "description": "ONNX Runtime을 통합하고 OnnxInferenceNode를 구현하여 DiffSinger 등 딥러닝 모델을 지원하는 추론 파이프라인 구축",
        "details": "ONNX Runtime C++ API 통합, 동적 모델 로딩, GPU/CPU 백엔드 자동 선택, 텐서 데이터 타입 변환 (float32, int64 등). OnnxInferenceNode는 .onnx 모델 경로와 입력 텐서를 DataPacket으로 받아 추론 수행 후 결과 텐서 반환. DiffSinger 아키텍처 분석하여 어쿠스틱 모델 (음소→멜스펙트로그램)과 보코더 모델 (멜→파형) 지원. 배치 추론 및 스트리밍 추론 모드.",
        "testStrategy": "사전 학습된 DiffSinger 모델로 추론 테스트, GPU/CPU 성능 비교, 메모리 사용량 최적화 검증",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ONNX Runtime C++ 라이브러리 통합 및 기본 환경 설정",
            "description": "ONNX Runtime C++ API를 프로젝트에 통합하고 GPU/CPU 백엔드 자동 선택 기능을 구현",
            "dependencies": [],
            "details": "CMakeLists.txt에 ONNX Runtime 의존성 추가, GPU 사용 가능 여부 자동 감지하여 ExecutionProvider 선택 (CUDA, DirectML, CPU), 초기화 및 정리 함수 구현, 런타임 버전 호환성 검증 로직 포함",
            "status": "pending",
            "testStrategy": "GPU/CPU 환경에서 ONNX Runtime 초기화 성공 여부 테스트, 메모리 누수 검증"
          },
          {
            "id": 2,
            "title": "텐서 데이터 타입 변환 및 메모리 관리 유틸리티 구현",
            "description": "ONNX 텐서와 내부 데이터 구조 간 변환을 위한 유틸리티 클래스 구현",
            "dependencies": [
              "8.1"
            ],
            "details": "float32, int64, string 등 ONNX 지원 데이터 타입 변환 함수, DataPacket과 Ort::Value 간 상호 변환, 텐서 shape 검증 및 배치 처리를 위한 동적 크기 조정, 메모리 풀링을 통한 성능 최적화",
            "status": "pending",
            "testStrategy": "다양한 데이터 타입 변환 정확성 테스트, 대용량 텐서 처리 시 메모리 사용량 모니터링"
          },
          {
            "id": 3,
            "title": "OnnxInferenceNode 기본 구조 및 모델 로딩 구현",
            "description": "ProcessorNode를 상속받는 OnnxInferenceNode 클래스 구현 및 동적 ONNX 모델 로딩 기능",
            "dependencies": [
              "8.2"
            ],
            "details": "ProcessorNode 인터페이스 구현, .onnx 파일 경로를 통한 동적 모델 로딩, 입력/출력 텐서 메타데이터 추출 및 검증, 모델별 세션 캐싱으로 재로딩 최적화, 스레드 안전성 보장",
            "status": "pending",
            "testStrategy": "다양한 ONNX 모델 로딩 테스트, 잘못된 모델 파일에 대한 에러 처리 검증"
          },
          {
            "id": 4,
            "title": "DiffSinger 아키텍처 분석 및 어쿠스틱/보코더 모델 지원",
            "description": "DiffSinger의 어쿠스틱 모델과 보코더 모델을 위한 특화된 추론 파이프라인 구현",
            "dependencies": [
              "8.3"
            ],
            "details": "DiffSinger 입력 형식 분석 (음소 시퀀스, 피치, 듀레이션), 어쿠스틱 모델용 전처리 (음소→토큰 변환, 피치 정규화), 보코더 모델용 멜스펙트로그램 처리, 모델별 추론 설정 및 하이퍼파라미터 관리",
            "status": "pending",
            "testStrategy": "실제 DiffSinger 모델로 음소→멜스펙트로그램→파형 변환 테스트, 출력 품질 검증"
          },
          {
            "id": 5,
            "title": "배치 추론 및 스트리밍 추론 모드 구현",
            "description": "실시간 스트리밍과 배치 처리를 모두 지원하는 추론 모드 구현",
            "dependencies": [
              "8.4"
            ],
            "details": "배치 추론: 전체 시퀀스를 한 번에 처리하여 최대 성능 달성, 스트리밍 추론: 청크 단위 실시간 처리로 지연시간 최소화, 상태 관리를 통한 연속적인 추론, 동적 배치 크기 조정 및 메모리 사용량 최적화",
            "status": "pending",
            "testStrategy": "실시간 추론 지연시간 측정, 배치 처리 throughput 벤치마크, 긴 시퀀스에서의 메모리 안정성 테스트"
          }
        ]
      },
      {
        "id": 9,
        "title": "범용 C-ABI 공개 API 설계 및 구현",
        "description": "UTAU 외 프런트엔드 연동을 위한 C-ABI 호환 공개 API (PublicCApi.h) 설계 및 구현",
        "details": "C 스타일 API 인터페이스로 언어별 바인딩 지원 (Python, JavaScript, C# 등), 구조화된 입력 데이터 (노트 시퀀스, 가사, 발음 기호, 피치 커브, 컨트롤 파라미터), 비동기 처리 지원, 콜백 함수 기반 진행률 모니터링, 에러 핸들링 및 상태 코드 정의. 동적 라이브러리 (.so, .dll, .dylib) 빌드 설정, 헤더 파일 공개 인터페이스 명세.",
        "testStrategy": "다양한 언어에서 API 바인딩 테스트, 대용량 데이터 처리 성능 검증, 멀티스레드 환경 안정성 테스트",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "C-ABI 공개 헤더 파일 설계 및 데이터 구조 정의",
            "description": "PublicCApi.h 헤더 파일을 설계하고 C-ABI 호환 데이터 구조 정의",
            "dependencies": [],
            "details": "C 스타일 구조체로 노트 시퀀스, 가사, 발음 기호, 피치 커브, 컨트롤 파라미터를 표현하는 데이터 타입 정의. extern \"C\" 링키지 지정으로 C++ 네임 맹글링 방지, 플랫폼별 ABI 호환성 고려하여 패킹과 정렬 설정. 에러 코드 열거형과 상태 코드 정의, 콜백 함수 포인터 타입 정의.",
            "status": "pending",
            "testStrategy": "C, C++에서 헤더 파일 포함 테스트, 구조체 크기 및 정렬 검증"
          },
          {
            "id": 2,
            "title": "핵심 API 함수 인터페이스 구현",
            "description": "초기화, 합성 요청, 리소스 해제 등 핵심 API 함수들 구현",
            "dependencies": [
              "9.1"
            ],
            "details": "voceversa_init(), voceversa_synthesize(), voceversa_cleanup() 등 핵심 함수 구현. 내부 C++ 객체와 C API 간 브리지 역할 수행, 예외 처리를 에러 코드로 변환. 스레드 안전성 보장을 위한 뮤텍스 적용, 글로벌 상태 관리 및 다중 인스턴스 지원.",
            "status": "pending",
            "testStrategy": "기본 합성 워크플로우 테스트, 메모리 누수 검사, 스레드 안전성 검증"
          },
          {
            "id": 3,
            "title": "비동기 처리 및 콜백 시스템 구현",
            "description": "비동기 합성 처리와 진행률 모니터링을 위한 콜백 시스템 구현",
            "dependencies": [
              "9.2"
            ],
            "details": "voceversa_synthesize_async() 함수로 백그라운드 스레드에서 합성 수행. 진행률 콜백 (progress_callback), 완료 콜백 (completion_callback), 에러 콜백 (error_callback) 지원. 작업 취소 기능 (voceversa_cancel_synthesis) 및 작업 상태 조회 API 구현.",
            "status": "pending",
            "testStrategy": "장시간 합성 작업에서 콜백 동작 확인, 작업 취소 기능 테스트, 메모리 관리 검증"
          },
          {
            "id": 4,
            "title": "동적 라이브러리 빌드 설정 및 심볼 익스포트",
            "description": "플랫폼별 동적 라이브러리 (.so, .dll, .dylib) 빌드 설정과 심볼 익스포트 구성",
            "dependencies": [
              "9.1",
              "9.2",
              "9.3"
            ],
            "details": "CMakeLists.txt에 SHARED 라이브러리 타겟 추가, Windows에서 __declspec(dllexport) 매크로 정의, Linux/macOS에서 visibility 속성 설정. def 파일로 Windows DLL 심볼 명시적 익스포트, 버전 정보 및 메타데이터 임베딩. 정적 링킹 옵션도 함께 제공.",
            "status": "pending",
            "testStrategy": "각 플랫폼에서 동적 라이브러리 빌드 성공 확인, 심볼 익스포트 검증, 외부 프로그램에서 라이브러리 로딩 테스트"
          },
          {
            "id": 5,
            "title": "언어별 바인딩 예제 및 사용 가이드 작성",
            "description": "Python, JavaScript, C# 등 주요 언어에서 API 사용 예제와 바인딩 가이드 작성",
            "dependencies": [
              "9.4"
            ],
            "details": "Python ctypes 바인딩 예제, Node.js ffi-napi 바인딩, C# P/Invoke 선언 예제 작성. 각 언어별 래퍼 클래스 구현으로 사용 편의성 향상, 에러 처리 및 메모리 관리 패턴 제시. examples/ 디렉토리에 실행 가능한 샘플 코드 배치.",
            "status": "pending",
            "testStrategy": "각 언어에서 바인딩 코드 실행 테스트, 메모리 관리 정확성 검증, 다양한 플랫폼에서 바인딩 동작 확인"
          }
        ]
      },
      {
        "id": 10,
        "title": "GitHub Actions CI/CD 파이프라인 및 크로스플랫폼 빌드 자동화",
        "description": "GitHub Actions을 통한 지속적 통합/배포 파이프라인 구축 및 Windows, macOS, Ubuntu, Android, iOS 빌드 자동화",
        "details": "GitHub Actions 워크플로우 설정: 플랫폼별 빌드 매트릭스 (windows-latest, macos-latest, ubuntu-latest), 의존성 캐싱, 단위 테스트 자동 실행, 코드 커버리지 측정. Android NDK 빌드 설정, iOS Xcode 프로젝트 생성, 아티팩트 자동 업로드 및 버저닝. 코드 품질 검사 도구 (clang-format, cppcheck) 통합, 라이선스 준수 검증 스크립트.",
        "testStrategy": "각 플랫폼별 빌드 성공 확인, 배포된 바이너리 기능 테스트, CI 파이프라인 실행 시간 최적화 검증",
        "priority": "medium",
        "dependencies": [
          1,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "기본 GitHub Actions 워크플로우 설정 및 크로스플랫폼 빌드 매트릭스 구성",
            "description": "GitHub Actions 워크플로우 파일을 생성하고 Windows, macOS, Ubuntu 플랫폼에 대한 빌드 매트릭스를 설정합니다.",
            "dependencies": [],
            "details": ".github/workflows/ci.yml 파일 생성. windows-latest, macos-latest, ubuntu-latest 매트릭스 설정. CMake 빌드 설정 및 컴파일러별 최적화 옵션 구성. 빌드 아티팩트 생성 및 업로드 설정. 병렬 빌드 최적화를 위한 cache 설정.",
            "status": "pending",
            "testStrategy": "각 플랫폼에서 워크플로우 실행 성공 확인, 빌드 아티팩트 생성 검증, 빌드 시간 측정"
          },
          {
            "id": 2,
            "title": "의존성 캐싱 및 단위 테스트 자동화 설정",
            "description": "빌드 시간 단축을 위한 의존성 캐싱과 CTest를 통한 자동화된 단위 테스트 실행을 구성합니다.",
            "dependencies": [
              "10.1"
            ],
            "details": "actions/cache를 사용한 CMake 빌드 캐시 및 패키지 관리자 캐시 설정. CTest 실행을 위한 워크플로우 단계 추가. 테스트 결과 리포팅을 위한 actions/upload-artifact 설정. 테스트 실패 시 로그 수집 및 알림 설정.",
            "status": "pending",
            "testStrategy": "캐시 적중률 확인, 테스트 실행 시간 측정, 테스트 결과 리포트 검증"
          },
          {
            "id": 3,
            "title": "코드 커버리지 측정 및 품질 검사 도구 통합",
            "description": "gcov/lcov를 통한 코드 커버리지 측정과 clang-format, cppcheck 등 코드 품질 검사 도구를 통합합니다.",
            "dependencies": [
              "10.2"
            ],
            "details": "gcov를 통한 커버리지 데이터 수집 설정. lcov를 사용한 HTML 커버리지 리포트 생성. clang-format을 통한 코드 스타일 검사. cppcheck를 통한 정적 분석. Codecov 또는 Coveralls 연동으로 커버리지 리포팅.",
            "status": "pending",
            "testStrategy": "커버리지 리포트 생성 확인, 코드 품질 검사 통과 여부 검증, 품질 메트릭 임계값 설정"
          },
          {
            "id": 4,
            "title": "Android NDK 및 iOS 빌드 설정",
            "description": "Android NDK를 통한 안드로이드 빌드와 Xcode를 통한 iOS 빌드 자동화를 설정합니다.",
            "dependencies": [
              "10.1"
            ],
            "details": "Android NDK 설치 및 CMake 툴체인 파일 설정. android.yml 워크플로우 생성으로 ARM64/x86_64 아키텍처 지원. iOS용 Xcode 프로젝트 생성을 위한 CMake 설정. macOS runner에서 iOS 시뮬레이터 및 디바이스 빌드 설정. 플랫폼별 서명 및 패키징 설정.",
            "status": "pending",
            "testStrategy": "안드로이드 APK 생성 확인, iOS 앱 빌드 성공 검증, 다양한 아키텍처별 바이너리 검증"
          },
          {
            "id": 5,
            "title": "자동 버저닝, 라이선스 검증 및 릴리스 배포 설정",
            "description": "시맨틱 버저닝을 통한 자동 태깅, 라이선스 준수 검증, GitHub Releases를 통한 자동 배포를 설정합니다.",
            "dependencies": [
              "10.3",
              "10.4"
            ],
            "details": "semantic-release 또는 GitVersion을 통한 자동 버전 관리. 라이선스 헤더 검증 스크립트 작성 및 CI 통합. GitHub Releases API를 통한 릴리스 노트 자동 생성. 플랫폼별 바이너리 및 라이브러리 패키징. 릴리스 브랜치 보호 규칙 및 승인 워크플로우 설정.",
            "status": "pending",
            "testStrategy": "버전 태깅 자동화 검증, 라이선스 규정 준수 확인, 릴리스 아티팩트 다운로드 및 실행 테스트"
          }
        ]
      },
      {
        "id": 11,
        "title": "UTAU 포맷 아티팩트 생성 및 호환성 검증",
        "description": "UTAU 포맷(f0.txt, sp.bin, ap.bin, meta.json)으로 분석/합성 아티팩트를 내보내고 world4utau와의 호환성을 검증하는 작업. WORLD ON/OFF 빌드와 테스트를 모두 통과하도록 품질 게이트를 설정합니다.",
        "details": "UTAU 포맷 메모:\n- f0.txt: 한 줄당 한 프레임 f0(Hz)\n- sp.bin/ap.bin: double 리틀엔디언, 길이 = frames*bins, 프레임 우선 row-major\n- meta.json: frames, bins, fftSize, framePeriodMs 등 합성에 필요한 메타 포함\n\n품질 게이트:\n- Build: PASS (WORLD ON/OFF)\n- Tests: PASS\n- 주요 경로 스모크: vv_world 분석/합성 경로 컴파일 완료\n\n다음 단계(옵션):\n- world4utau의 정확한 파일 배치/이름 규약 맞춤 옵션 추가\n- f0 추정 알고리즘 선택(Harvest/DIO) CLI 옵션화\n- sp/ap bin의 float/double 선택 저장 옵션\n- 멀티채널/스테레오 지원\n\nNote: 필요하면 world4utau와 100% 호환되는 경로/이름/데이터타입으로 스펙을 더 엄격히 맞추겠습니다.",
        "testStrategy": "- WORLD ON/OFF 모두 빌드 성공 확인\n- 단위/통합 테스트 전부 PASS\n- vv_world 경로의 분석→합성 파이프라인 컴파일/링크 스모크 체크",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-09T11:30:33.895Z",
      "updated": "2025-08-09T16:23:04.214Z",
      "description": "Tasks for master context"
    }
  }
}