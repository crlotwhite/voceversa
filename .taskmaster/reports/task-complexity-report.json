{
	"meta": {
		"generatedAt": "2025-08-09T16:24:48.548Z",
		"tasksAnalyzed": 1,
		"totalTasks": 11,
		"analysisCount": 5,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": false
	},
	"complexityAnalysis": [
		{
			"taskId": 7,
			"taskTitle": "UTAU 호환 어댑터 및 플러그인 인터페이스 구현",
			"complexityScore": 9,
			"recommendedSubtasks": 6,
			"expansionPrompt": "UTAU 호환성 구현을 위해 다음 세부 작업으로 확장: 1) UTAU 커맨드라인 파라미터 파싱 시스템 구현 (음소 길이, 피치 매개변수, 플래그 분석), 2) .wav/.frq/.llsm 임시 파일 형식 파서 구현, 3) UtauAdapter 클래스로 UTAU→DataPacket 변환 로직 구현, 4) 다중 백엔드(WORLD/PSOLA/LLSM2) 선택 설정 시스템 구현, 5) resampler.exe/wavtool.exe Windows 실행 파일 빌드 타겟 추가, 6) UTAU 플러그인 디렉토리 자동 설치 배치 스크립트 구현. 기존 UtauWorldInterface 기반 확장.",
			"reasoning": "기존 UtauWorldInterface가 부분적으로 구현되어 있어 기반이 있지만, UTAU 전체 파이프라인 호환성을 위해서는 복잡한 파라미터 파싱, 다중 백엔드 지원, Windows 실행 파일 생성 등 고난도 작업들이 필요함. CMake 구조가 잘 갖춰져 있어 빌드는 용이하나 UTAU 특수 규격 준수가 까다로움."
		},
		{
			"taskId": 11,
			"taskTitle": "UTAU 포맷 아티팩트 생성 및 호환성 검증",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "UTAU 포맷 호환성 완성을 위해 다음으로 확장: 1) vv_world 도구의 UTAU 포맷 출력 검증 및 보완 (f0.txt, sp.bin, ap.bin, meta.json 형식 정확성), 2) world4utau와의 바이너리 호환성 테스트 스위트 구현, 3) WORLD ON/OFF 빌드 설정에서 모든 테스트 통과 보장, 4) 품질 게이트 자동화 (빌드, 테스트, 스모크 테스트) 및 CI 통합. 기존 UtauWorldIO 구현 활용.",
			"reasoning": "UtauWorldInterface와 vv_world 도구가 이미 구현되어 있어 기본 UTAU 포맷 지원이 있음. 주로 호환성 검증과 품질 게이트 설정이 필요한 작업으로 상대적으로 단순함. 기존 CI 인프라 활용 가능."
		},
		{
			"taskId": 10,
			"taskTitle": "GitHub Actions CI/CD 파이프라인 및 크로스플랫폼 빌드 자동화",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "기존 CI 확장을 위해 다음으로 세분화: 1) 현재 ci.yml을 기반으로 Android NDK 빌드 매트릭스 추가, 2) iOS/macOS Xcode 프로젝트 빌드 워크플로우 구현, 3) 빌드 아티팩트 자동 업로드 및 릴리즈 태깅 시스템 구현, 4) 코드 품질 도구(clang-format, cppcheck) 통합 및 강제, 5) 크로스플랫폼 바이너리 호환성 자동 테스트 추가. vcpkg 캐싱과 CMake 프리셋 활용.",
			"reasoning": "이미 기본 CI 파이프라인(ci.yml)이 구축되어 있고 vcpkg 통합이 완료됨. CMake 프리셋과 빌드 스크립트가 준비되어 추가 플랫폼 지원은 비교적 간단함. 아티팩트 관리와 품질 도구 통합이 주요 작업."
		},
		{
			"taskId": 9,
			"taskTitle": "범용 C-ABI 공개 API 설계 및 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 5,
			"expansionPrompt": "C-ABI API 구현을 위해 다음으로 확장: 1) 기존 ISynthesisNode와 DataPacket을 C 구조체로 래핑하는 C-ABI 헤더 설계(PublicCApi.h), 2) 메모리 관리와 에러 처리를 위한 안전한 C 래퍼 함수들 구현, 3) 비동기 처리와 콜백 시스템 구현 (진행률 모니터링 포함), 4) 동적 라이브러리(.so/.dll/.dylib) 빌드 CMake 타겟 추가, 5) Python/JavaScript 바인딩 예제 및 테스트 케이스 구현. 기존 voceversa_core 라이브러리 기반 확장.",
			"reasoning": "기존 ISynthesisNode 인터페이스와 DataPacket이 잘 설계되어 있어 C 래핑이 가능함. 하지만 C++에서 C로의 ABI 변환, 메모리 안전성, 언어 바인딩 등 복잡한 상호운용성 작업이 필요. CMake 기반 동적 라이브러리 빌드는 현재 구조에서 확장 가능."
		},
		{
			"taskId": 8,
			"taskTitle": "ONNX Runtime 통합 및 딥러닝 추론 노드 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 5,
			"expansionPrompt": "ONNX Runtime 통합을 위해 다음으로 확장: 1) ONNX Runtime C++ API를 vcpkg 의존성으로 추가하고 CMake 링크 설정, 2) OnnxInferenceNode 클래스 구현 (ISynthesisNode 인터페이스 준수), 3) 텐서 데이터 타입 변환 시스템 구현 (DataPacket ↔ ONNX 텐서), 4) GPU/CPU 백엔드 자동 선택 및 동적 모델 로딩 구현, 5) DiffSinger 아키텍처 지원을 위한 배치/스트리밍 추론 모드 구현. 기존 ISynthesisNode 패턴 활용.",
			"reasoning": "ISynthesisNode 인터페이스가 잘 정의되어 있어 새로운 노드 추가가 용이함. ONNX Runtime은 복잡한 라이브러리이고 텐서 변환, GPU 관리 등 고난도 작업이 필요. vcpkg 생태계와 CMake 구조가 외부 라이브러리 통합을 지원함."
		}
	]
}